This is the Developer ReadMe file for Shadowlands Roadtrip.
Currently this is an incomplete draft.

Shadowlands RoadTrip is a simple app to keep track of your vehicles' mileage,
trips, gas, and service. The project includes the Android app, and a Java Swing
application for viewing database backups on a PC or Mac.

Contents:
- How to get the latest source
- Programs included
- Java/Android versions required
- How to build
- Overview of source dir (location of schema files, etc)
- Before testing, reminder how to back up / export data
- Coding style
- Version history
- Future plans / feature roadmap
- Other source included (libraries), and software licenses

(those sections here)

The project development site is https://github.com/jdmonin/SLRoadtrip


How to build:

These instructions are for Eclipse; instructions for Android Studio are TBD.

You can use the standard Java Eclipse, although after installing that it can be
useful to go to go to Add Software and download the Data Tools Platform from
Java EE (J2EE) to use the data browser. To develop for Android, get the ADT
plugin and use it to download the Android SDK and at least one android version's
platform.  Currently SLRoadtrip's android project targets 3.0 (API level 11).

Once your Eclipse is set up for Android, there are 2 projects to add to your
workspace: bookedit is the Java program for viewing SLRoadtrip backup files
on your computer, and roadtrip-an is the Android app.

Make a local clone or fork of the SLRoadtrip git repo.  If you're starting from
a previous released version (not the latest commit), you can start a new branch
from the version's tag with:
	git checkout -b branch_0941 release-0.9.41
Otherwise just use:
	git checkout master

You'll probably also want to download a SQLite jdbc driver jar to use with bookedit.
See https://bitbucket.org/xerial/sqlite-jdbc -> Downloads.

In Eclipse we'll first add the bookedit project, which is simpler than roadtrip-an:
- In the Eclipse menu, File -> New -> Project... -> Java -> From Exiting Ant Buildfile
- Ant buildfile: Within the checked-out copy from git, browse to build.xml in the bookedit folder
- Project name: slroadtrip-bookedit [or another name if you prefer]
- Javac declaration: Hilight the sole javac task
- Set this checkbox: Link to the buildfile in the file system
- Click Finish

This should add slroadtrip-bookedit to the workspace list of projects (Package Explorer).
Right-click it there and choose Properties to review the project settings:
	Source tab: Should show slroadtrip-bookedit/src containing source folders for
	  gnu.trove, org.shadowlands.roadtrip.bookedit, and other packages.
	  Be sure that "Allow output folders for source folders" is un-checked.
	  Set the default output folder to slroadtrip-bookedit/bin/classes .
	Projects tab: An empty list: there aren't any required projects
	Libraries tab: JRE system library
	  Add external JAR -> sqlite-jdbc-*.jar
	Order and Export tab: contains slroadtrip-bookedit/src, JRE system library, sqlite jar
	On OS X, on the left side of the properties window also check Resource ->
	  Text file encoding, which needs to be UTF-8 and not MacRoman or another value.
Click OK.

Hilight bookedit in Package Explorer, then go to the Project menu -> Build Project.
After the build, check for any errors in the Problems pane and red X icons in the
Package Explorer.  Typically there will be no errors.

Once the build succeds, in the Package Explorer find bookedit/src/
org.shadowlands.roadtrip.bookedit/Main.java. Right-click it and choose
Run As -> Java Application.  You should see the BookEdit main window appear,
showing some buttons and the version and db schema version.  Choose Exit.
This also adds "Main" to your eclipse Run button dropdown; you can rename it
using the Run Configurations dialog.

To build and run slroadtrip-bookedit.jar (optional), right-click build.xml
-> Run as -> Ant Build. This will compile the classes and create the JAR.
Copy the sqlite jar into the same folder as slroadtrip-bookedit.jar and
rename it to sqlite-jdbc.jar (without any version number). At this point
you can run slroadtrip-bookedit.jar and view db backup files.

Now add the android project to your workspace:
- In the Eclipse menu, File -> New -> Project...
	Android -> Android project from existing code
- Project Root Directory: Within the checked-out copy from git, browse to the
  roadtrip-an folder which contains the AndroidManifest.xml and .project files
- In the list of Projects to Import, roadtrip-an should appear with a checkmark
- Don't check the "copy projects into workspace" checkbox
- Click Finish

This should add roadtrip-an to the workspace list of projects (Package Explorer).
Right-click it there and go to its Properties.  Under Android, be sure to choose
a Build Target from the platform versions you've downloaded, 3.0 (API level 11)
or higher.  On OS X, please also check Project Properties -> Resource -> Text
file encoding, which needs to be UTF-8 and not MacRoman or any other value.

Go to the Project menu -> Build Project.  After the build, check for any errors
in the Problems pane and red X icons in the Package Explorer. Typically there
will be no errors.  Some errors can be resolved by right-clicking the project
and choosing Android Tools -> Fix Project Properties.

Before running roadtrip-an for the first time, create an android emulated device
(AVD) if you don't already have one with version 3.0 (API level 11) or higher.

To run roadtrip-an, start the emulator, then in Package Explorer right-click
roadtrip-an and choose Run As -> Android Application.  This also adds
"roadtrip-an" to your eclipse Run button dropdown.  In a moment you should
see the Shadowlands Roadtrip welcome screen.  Exit that, or start to enter some
test data or restore a backup you've sent into the emulator's Downloads folder.
Once a driver and vehicle are created or restored, the app will start at its
main menu.

At this point you're ready to work on developing BookEdit or roadtrip-an.


Overview of source dir:

Some common files, mostly db-related, are duplicated between the android and
bookedit source directories: src/org/shadowlands/roadtrip/db and model, and
SQL scripts to create and upgrade the schema.

Android: If you want the commit hash to show in the About box: Before building,
manually edit res/raw/gitversion.txt to contain the commit hash, then refresh
that file in Eclipse. This is always done before releasing a version, so that
the About box for the app in the APK will display the final build info.
Never check in the updated gitversion.txt contents: the contents of
gitversion.txt (or svnversion.txt) in the repo should always be "?".

In the bookedit source, the android directories are empty or missing.
In the android source, the bookedit and jdbc directories are empty or missing.
The SQL scripts (schemas and database upgrade scripts) are found in
bookedit src/org/shadowlands/roadtrip/db/script/*.sql and in
android res/raw/*.sql. The schema scripts have comments about table fields'
meaning and expected contents and related tables.

SQL Foreign Keys: To simplify Android support, for now Roadtrip manually
enforces foreign keys. Although Android 2.2 contained sqlite 3.6.22 with
support for FKs, they are off by default, and can't be turned on during a
transaction such as onUpgrade. Until Android 4.1 added onConfig, it was
difficult to configure the open database before the call to onUpgrade, so
for now we aren't using this feature of SQLite.

The bookedit and roadtrip-an version numbers should be fairly close to
each other. roadtrip-an's version is kept in AndroidMainfest.xml.
bookedit's version is kept in org/shadowlands/roadtrip/bookedit/Main.java.

More info about the SQLite versions and features available in Android is found
by comparing the version numbers in http://www.sqlite.org/changes.html against
those in http://stackoverflow.com/questions/2421189/version-of-sqlite-used-in-android
As of May 2015, that table is summarized as:
	1.6 Cupcake, 2.1 Eclair:       3.5.9   2008-05-14
	2.2 Froyo, 2.3 Gingerbread:    3.6.22  2010-01-06
	3.0 Honeycomb, 4.0 ICS:        3.7.4   2010-12-08
	4.1-4.3 Jellybean, 4.4 KitKat: 3.7.11  2012-03-20
	5.0 Lollipop:                  3.8.4.3 2014-04-03
	5.1 Lollipop:                  3.8.6   2014-08-15


(more sections here)



Coding style:
   (more here)
Within Activities, fields are declared in this order:
- Anything static
- DB connection
- DB objects (Vehicle, Trip, etc)
- Flags and other non-GUI fields
- On-screen views and other GUI items

Most sorted dropdowns (such as gas_brandgrade) should be case-insensitive.
In SQLite you can specify this with orderBy = "fieldname COLLATE NOCASE".



Version history:
	Older revisions were svn, more recent ones are git tags and commits*.
	The entire svn repo and revision history were migrated to git 2015-05-03,
	for details see roadtrip-svn2git.sh comments.

rev	version	date
-	0.8.05	2010-10-06	first install on any device hardware
-	0.8.07	2010-10-15
-	0.9.01	2010-11-20
r5	0.9.05	2010-11-30
r24	0.9.06	2011-02-13
r25		2011-02-19
r64		2011-04-18
r118		2011-07-21
r149		2011-08-25
r164		2011-09-22
r173            2011-12-11
r246	0.9.08	2012-04-01	First version released as an APK
r271	0.9.12	2012-05-06	Add Settings screen to make some fields required, optional, or hidden;
				LogbookShow add search for locations in geoarea "(none)"; move validation to background task
r315	0.9.20b	2013-01-15	Beta. Allow save without continuing from stop; at startup, button to restore backup;
				Vehicle +plate/tag#; trip +#passengers; 1-step validation in LogbookShow; beta csv log export
r347	0.9.20	2013-10-22	Change vehicle & some related settings during trip; add landscape layouts;
				allow Backup/Restore with any folder; TripBegin ask before using historical mode
r409	0.9.40	2014-08-27	Most current settings are now per-vehicle; refactor db restore code;
				bookedit can view backups having old schemas; Set build target and targetSdkVersion to 11 (v3.0)
				for ActionBar and Holo Light theme if available, but keep minSdkVersion at 8 (v2.2)
r428	0.9.41	2015-04-27	Minor improvements and bugfixes since 0.9.40:
				Less clutter in vehicle dropdowns: Show only Active or Inactive vehicles, with "Other..." entry
				  to switch, in Bookedit and in android Logbook and Recent Gas.
				New Vehicle activity asks for GeoArea, instead of using the current vehicle's current area.
				When a new vehicle is added, ChangeDriverOrVehicle always asks whether to change the current vehicle.
				Bookedit: When opening an older-schema file for edit, asks whether to upgrade in place
				  or make a read-only copy like it does for viewing older backups.
r431	-	2015-05-03	3393a0f  Migration from svn to git, google code to github
66a175e	0.9.42	2015-05-06	Minor android improvements and bugfixes since 0.9.41:
				Change linked odometer at 1st whole-number change, not just 2nd and further ones.
				Disable odometer button wraparound (0 -> 9999999) seen in trip odo.
				TripTStopEntry calculator: Add Reset button, Clear no longer doubles as Reset.
	0.9.43			Being developed now; minor improvements and bugfixes since 0.9.42.
				- New field "Date Added" for drivers, vehicles, GeoAreas
				- Vehicle: Model year no longer required; has always allowed 0 in schema and apps
				SLRoadtrip android app:
				- Hide Frequent Trip buttons by default on new installs. (Settings menu can un-hide them)
				- About box: Show build number at bottom, not in title bar. (git hashes are unwieldy up there)
				BookEdit desktop utility app:
				- Add build.xml to create slroadtrip-bookedit.jar.
				- View/edit details for all drivers and vehicles, including vehicle Active flag.
				- Better error handling if driver/vehicle settings are missing in db.

Also see doc/hist/*.sql for previous schema updates.

* Because a git commit can't predict and include its own hash, a released
  version's copy of README.developer contains its release date and its most
  recent commit hash, the parent of the commit updating README.developer
  with that info. The release-#.#.## tag in git points to that README update,
  and the released APK's About box also shows its commit hash.

  After release and before continuing development, README.developer should be
  updated to list that same hash for the released version.



Future plans / feature roadmap:

After v1.0:
- More logbook search options
- Logbook viewer: Ability to correct typos (comments, location names, via routes, etc)
- General schema for new event types at stop (vehicle service, restaurant, movie, etc)
- "pass-through" TStop (rest area, toll, etc): Not a destination, just something on the way
	At next tstop or end of trip, also write ViaRoutes from before this stop to the following one
- Frequent Trips GUI to reduce per-trip data entry (to grocery store, to work, etc)
- More reporting options (by trip category, by driver, monthly/yearly summary, etc)



Other source included (libraries), and software licenses:

Shadowlands Roadtrip is licensed under GPL v3 or later
(the GNU General Public License).  See the COPYING file for details.

Included graphics are copyright (C) Jeremy D Monin, licensed (CC) By-SA 3.0.

Includes portions of GNU Trove 2.1.0 as source, which is licensed under
LGPL v2.1 or later (the GNU Lesser General Public License).
See src/gnu/grove/TIntObjectHashMap.java comments for details.

Includes the Android NumberPicker widget as modified source, via
com.quietlycoding.android.picker.NumberPicker, which is licensed under
the Apache License version 2.0.  See
src/com/quietlycoding/android/picker/NumberPicker.java comments for details.

Includes FileUtils.java modified from the summer 2010 source of AndiCar, which
is licensed under GPL v3. See https://code.google.com/p/andicar/ for details, or
src/org/shadowlands/roadtrip/android/util/FileUtils.java.

Includes CSVWriter as modified source, from opencsv 2.3, which
is licensed under the Apache License version 2.0.  See
http://sourceforge.net/projects/opencsv/ for details, or
src/au/com/bytecode/CSVWriter.java.
